// Code generated by protoc-gen-go. DO NOT EDIT.
// source: admin.proto

package types // import "/types"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AdminRPCService service

type AdminRPCServiceClient interface {
	// Returns the TX-relasted statistics of the current mempool.
	MempoolTxStat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SingleBytes, error)
	// Returns the TX-relasted statistics of the current mempool.
	MempoolTx(ctx context.Context, in *AccountList, opts ...grpc.CallOption) (*SingleBytes, error)
}

type adminRPCServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminRPCServiceClient(cc *grpc.ClientConn) AdminRPCServiceClient {
	return &adminRPCServiceClient{cc}
}

func (c *adminRPCServiceClient) MempoolTxStat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SingleBytes, error) {
	out := new(SingleBytes)
	err := grpc.Invoke(ctx, "/types.AdminRPCService/MempoolTxStat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminRPCServiceClient) MempoolTx(ctx context.Context, in *AccountList, opts ...grpc.CallOption) (*SingleBytes, error) {
	out := new(SingleBytes)
	err := grpc.Invoke(ctx, "/types.AdminRPCService/MempoolTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdminRPCService service

type AdminRPCServiceServer interface {
	// Returns the TX-relasted statistics of the current mempool.
	MempoolTxStat(context.Context, *Empty) (*SingleBytes, error)
	// Returns the TX-relasted statistics of the current mempool.
	MempoolTx(context.Context, *AccountList) (*SingleBytes, error)
}

func RegisterAdminRPCServiceServer(s *grpc.Server, srv AdminRPCServiceServer) {
	s.RegisterService(&_AdminRPCService_serviceDesc, srv)
}

func _AdminRPCService_MempoolTxStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRPCServiceServer).MempoolTxStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AdminRPCService/MempoolTxStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRPCServiceServer).MempoolTxStat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminRPCService_MempoolTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRPCServiceServer).MempoolTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AdminRPCService/MempoolTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRPCServiceServer).MempoolTx(ctx, req.(*AccountList))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminRPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.AdminRPCService",
	HandlerType: (*AdminRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MempoolTxStat",
			Handler:    _AdminRPCService_MempoolTxStat_Handler,
		},
		{
			MethodName: "MempoolTx",
			Handler:    _AdminRPCService_MempoolTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}

func init() { proto.RegisterFile("admin.proto", fileDescriptor_admin_a5d7d41acdda8c4e) }

var fileDescriptor_admin_a5d7d41acdda8c4e = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4c, 0xc9, 0xcd,
	0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x96, 0xe2,
	0x2c, 0x2a, 0x48, 0x86, 0x88, 0x48, 0xf1, 0x26, 0x26, 0x27, 0xe7, 0x97, 0xe6, 0x95, 0x40, 0xb8,
	0x46, 0xb5, 0x5c, 0xfc, 0x8e, 0x20, 0xf5, 0x41, 0x01, 0xce, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9,
	0xa9, 0x42, 0xc6, 0x5c, 0xbc, 0xbe, 0xa9, 0xb9, 0x05, 0xf9, 0xf9, 0x39, 0x21, 0x15, 0xc1, 0x25,
	0x89, 0x25, 0x42, 0x3c, 0x7a, 0x60, 0x53, 0xf4, 0x5c, 0x73, 0x0b, 0x4a, 0x2a, 0xa5, 0x84, 0xa0,
	0xbc, 0xe0, 0xcc, 0xbc, 0xf4, 0x9c, 0x54, 0xa7, 0xca, 0x92, 0xd4, 0x62, 0x25, 0x06, 0x21, 0x53,
	0x2e, 0x4e, 0xb8, 0x26, 0x21, 0x98, 0x12, 0x47, 0x88, 0x55, 0x3e, 0x99, 0xc5, 0x25, 0xd8, 0xb5,
	0x39, 0x71, 0x44, 0xb1, 0xe9, 0x83, 0xc5, 0x93, 0xd8, 0xc0, 0xee, 0x31, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x24, 0xca, 0x6d, 0x1c, 0xbf, 0x00, 0x00, 0x00,
}
