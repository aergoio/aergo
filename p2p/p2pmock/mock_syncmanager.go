// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aergoio/aergo/v2/p2p/p2pcommon (interfaces: SyncManager,PeerAccessor)

// Package mock_p2pcommon is a generated GoMock package.
package p2pmock

import (
	p2pcommon "github.com/aergoio/aergo/v2/p2p/p2pcommon"
	types "github.com/aergoio/aergo/v2/types"
	gomock "github.com/golang/mock/gomock"
	peer "github.com/libp2p/go-libp2p/core/peer"
	reflect "reflect"
)

// MockSyncManager is a mock of SyncManager interface
type MockSyncManager struct {
	ctrl     *gomock.Controller
	recorder *MockSyncManagerMockRecorder
}

// MockSyncManagerMockRecorder is the mock recorder for MockSyncManager
type MockSyncManagerMockRecorder struct {
	mock *MockSyncManager
}

// NewMockSyncManager creates a new mock instance
func NewMockSyncManager(ctrl *gomock.Controller) *MockSyncManager {
	mock := &MockSyncManager{ctrl: ctrl}
	mock.recorder = &MockSyncManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncManager) EXPECT() *MockSyncManagerMockRecorder {
	return m.recorder
}

// HandleBlockProducedNotice mocks base method
func (m *MockSyncManager) HandleBlockProducedNotice(arg0 p2pcommon.RemotePeer, arg1 *types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleBlockProducedNotice", arg0, arg1)
}

// HandleBlockProducedNotice indicates an expected call of HandleBlockProducedNotice
func (mr *MockSyncManagerMockRecorder) HandleBlockProducedNotice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBlockProducedNotice", reflect.TypeOf((*MockSyncManager)(nil).HandleBlockProducedNotice), arg0, arg1)
}

// HandleGetBlockResponse mocks base method
func (m *MockSyncManager) HandleGetBlockResponse(arg0 p2pcommon.RemotePeer, arg1 p2pcommon.Message, arg2 *types.GetBlockResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleGetBlockResponse", arg0, arg1, arg2)
}

// HandleGetBlockResponse indicates an expected call of HandleGetBlockResponse
func (mr *MockSyncManagerMockRecorder) HandleGetBlockResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGetBlockResponse", reflect.TypeOf((*MockSyncManager)(nil).HandleGetBlockResponse), arg0, arg1, arg2)
}

// HandleGetTxReq mocks base method
func (m *MockSyncManager) HandleGetTxReq(arg0 p2pcommon.RemotePeer, arg1 p2pcommon.MsgID, arg2 *types.GetTransactionsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleGetTxReq", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleGetTxReq indicates an expected call of HandleGetTxReq
func (mr *MockSyncManagerMockRecorder) HandleGetTxReq(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGetTxReq", reflect.TypeOf((*MockSyncManager)(nil).HandleGetTxReq), arg0, arg1, arg2)
}

// HandleNewBlockNotice mocks base method
func (m *MockSyncManager) HandleNewBlockNotice(arg0 p2pcommon.RemotePeer, arg1 *types.NewBlockNotice) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleNewBlockNotice", arg0, arg1)
}

// HandleNewBlockNotice indicates an expected call of HandleNewBlockNotice
func (mr *MockSyncManagerMockRecorder) HandleNewBlockNotice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNewBlockNotice", reflect.TypeOf((*MockSyncManager)(nil).HandleNewBlockNotice), arg0, arg1)
}

// HandleNewTxNotice mocks base method
func (m *MockSyncManager) HandleNewTxNotice(arg0 p2pcommon.RemotePeer, arg1 []types.TxID, arg2 *types.NewTransactionsNotice) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleNewTxNotice", arg0, arg1, arg2)
}

// HandleNewTxNotice indicates an expected call of HandleNewTxNotice
func (mr *MockSyncManagerMockRecorder) HandleNewTxNotice(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNewTxNotice", reflect.TypeOf((*MockSyncManager)(nil).HandleNewTxNotice), arg0, arg1, arg2)
}

// RegisterTxNotice mocks base method
func (m *MockSyncManager) RegisterTxNotice(arg0 []*types.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterTxNotice", arg0)
}

// RegisterTxNotice indicates an expected call of RegisterTxNotice
func (mr *MockSyncManagerMockRecorder) RegisterTxNotice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTxNotice", reflect.TypeOf((*MockSyncManager)(nil).RegisterTxNotice), arg0)
}

// RetryGetTx mocks base method
func (m *MockSyncManager) RetryGetTx(arg0 p2pcommon.RemotePeer, arg1 [][]byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RetryGetTx", arg0, arg1)
}

// RetryGetTx indicates an expected call of RetryGetTx
func (mr *MockSyncManagerMockRecorder) RetryGetTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryGetTx", reflect.TypeOf((*MockSyncManager)(nil).RetryGetTx), arg0, arg1)
}

// Start mocks base method
func (m *MockSyncManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockSyncManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSyncManager)(nil).Start))
}

// Stop mocks base method
func (m *MockSyncManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockSyncManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSyncManager)(nil).Stop))
}

// Summary mocks base method
func (m *MockSyncManager) Summary() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summary")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Summary indicates an expected call of Summary
func (mr *MockSyncManagerMockRecorder) Summary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summary", reflect.TypeOf((*MockSyncManager)(nil).Summary))
}

// MockPeerAccessor is a mock of PeerAccessor interface
type MockPeerAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockPeerAccessorMockRecorder
}

// MockPeerAccessorMockRecorder is the mock recorder for MockPeerAccessor
type MockPeerAccessorMockRecorder struct {
	mock *MockPeerAccessor
}

// NewMockPeerAccessor creates a new mock instance
func NewMockPeerAccessor(ctrl *gomock.Controller) *MockPeerAccessor {
	mock := &MockPeerAccessor{ctrl: ctrl}
	mock.recorder = &MockPeerAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPeerAccessor) EXPECT() *MockPeerAccessorMockRecorder {
	return m.recorder
}

// GetPeer mocks base method
func (m *MockPeerAccessor) GetPeer(arg0 peer.ID) (p2pcommon.RemotePeer, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeer", arg0)
	ret0, _ := ret[0].(p2pcommon.RemotePeer)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPeer indicates an expected call of GetPeer
func (mr *MockPeerAccessorMockRecorder) GetPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeer", reflect.TypeOf((*MockPeerAccessor)(nil).GetPeer), arg0)
}

// GetPeerBlockInfos mocks base method
func (m *MockPeerAccessor) GetPeerBlockInfos() []types.PeerBlockInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerBlockInfos")
	ret0, _ := ret[0].([]types.PeerBlockInfo)
	return ret0
}

// GetPeerBlockInfos indicates an expected call of GetPeerBlockInfos
func (mr *MockPeerAccessorMockRecorder) GetPeerBlockInfos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerBlockInfos", reflect.TypeOf((*MockPeerAccessor)(nil).GetPeerBlockInfos))
}

// SelfMeta mocks base method
func (m *MockPeerAccessor) SelfMeta() p2pcommon.PeerMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfMeta")
	ret0, _ := ret[0].(p2pcommon.PeerMeta)
	return ret0
}

// SelfMeta indicates an expected call of SelfMeta
func (mr *MockPeerAccessorMockRecorder) SelfMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfMeta", reflect.TypeOf((*MockPeerAccessor)(nil).SelfMeta))
}
