diff --git a/blockchain/chaindb.go b/blockchain/chaindb.go
index 09ef88f..163c91b 100644
--- a/blockchain/chaindb.go
+++ b/blockchain/chaindb.go
@@ -193,7 +193,7 @@ func (cdb *ChainDB) reorg(block *types.Block) {
 			Hash:    tblock.Hash,
 		}
 		elems = append(elems, newElem)
-		logger.Debug().Uint64("blockNo", blockNo).Str("from", EncodeB64(tblock.Hash)).
+		logger.Debug().Uint64("blockNo", blockNo).Str("from", tblock.ID()).
 			Str("to", EncodeB64(mHash)).Msg("Reorg Failed invalid blockno")
 	}
 
diff --git a/blockchain/chainhandle.go b/blockchain/chainhandle.go
index b560d9c..20962bc 100644
--- a/blockchain/chainhandle.go
+++ b/blockchain/chainhandle.go
@@ -43,7 +43,7 @@ func (cs *ChainService) getTx(txHash []byte) (*types.Tx, *types.TxIdx, error) {
 }
 
 func (cs *ChainService) addBlock(nblock *types.Block, peerID peer.ID) error {
-	logger.Debug().Bytes("hash", nblock.GetHash()).Msg("add Block")
+	logger.Debug().Str("hash", nblock.ID()).Msg("add Block")
 	if cs.ChainInfo != nil {
 		// Check block validity by calling the corresponding interface
 		// implemented in a Consensus module.
@@ -87,7 +87,7 @@ func (cs *ChainService) addBlock(nblock *types.Block, peerID peer.ID) error {
 			return err
 		}
 		logger.Info().Int("processed_txn", len(txs)).Uint64("blockNo", block.GetHeader().GetBlockNo()).
-			Str("hash", EncodeB64(block.GetHash())).
+			Str("hash", block.ID()).
 			Str("prev_hash", EncodeB64(block.GetHeader().GetPrevBlockHash())).Msg("Block Added")
 		//return cs.mpool.Removes(block.GetBody().GetTxs()...)
 		cs.Hub().Request(message.MemPoolSvc, &message.MemPoolDel{
@@ -162,7 +162,7 @@ func (cs *ChainService) handleOrphan(block *types.Block, peerID peer.ID) error {
 	err := cs.addOrphan(block)
 	if err != nil {
 		// logging???
-		logger.Debug().Bytes("hash", block.GetHash()).Msg("add Orphan Block failed")
+		logger.Debug().Str("hash", block.ID()).Msg("add Orphan Block failed")
 
 		return err
 	}
diff --git a/blockchain/chainservice.go b/blockchain/chainservice.go
index a751a91..8eb973a 100644
--- a/blockchain/chainservice.go
+++ b/blockchain/chainservice.go
@@ -176,15 +176,16 @@ func (cs *ChainService) Receive(context actor.Context) {
 		})
 	case *message.AddBlock:
 		bkey := types.ToBlockKey(msg.Block.GetHash())
-		logger.Debug().Bytes("hash", msg.Block.GetHash()).Msg("Add Block chainservice")
+		logger.Debug().Str("hash", msg.Block.ID()).
+			Uint64("blockNo", msg.Block.GetHeader().GetBlockNo()).Msg("Add Block chainservice")
 		_, err := cs.getBlock(bkey[:])
 		if err == nil {
-			logger.Debug().Bytes("hash", msg.Block.GetHash()).Msg("already exist")
+			logger.Debug().Str("hash", msg.Block.ID()).Msg("already exist")
 		} else {
 			block := msg.Block.Clone()
 			err := cs.addBlock(block, msg.PeerID)
 			if err != nil {
-				logger.Info().Err(err).Msg("failed add block")
+				logger.Info().Err(err).Str("hash", msg.Block.ID()).Msg("failed add block")
 			}
 			context.Respond(message.AddBlockRsp{
 				BlockNo:   block.GetHeader().GetBlockNo(),
diff --git a/blockchain/orphanpool.go b/blockchain/orphanpool.go
index 126f94d..db12595 100644
--- a/blockchain/orphanpool.go
+++ b/blockchain/orphanpool.go
@@ -38,7 +38,8 @@ func (op *OrphanPool) addOrphan(block *types.Block) error {
 	key := types.ToBlockKey(block.Header.PrevBlockHash)
 	cachedblock, exists := op.cache[key]
 	if exists {
-		logger.Debug().Bytes("hash", block.GetHash()).Bytes("cashed", cachedblock.block.GetHash()).Msg("already exist")
+		logger.Debug().Str("hash", block.ID()).
+			Str("cached", cachedblock.block.ID()).Msg("already exist")
 		return fmt.Errorf("orphan block already exist")
 	}
 
@@ -52,7 +53,7 @@ func (op *OrphanPool) addOrphan(block *types.Block) error {
 		expiretime: time.Now().Add(time.Hour),
 	}
 	op.curCnt++
-	logger.Debug().Bytes("hash", block.GetHash()).Msg("add Orphan Block")
+	logger.Debug().Str("hash", block.ID()).Msg("add Orphan Block")
 	return nil
 }
 
diff --git a/consensus/impl/dpos/blockfactory.go b/consensus/impl/dpos/blockfactory.go
index bd637c3..e90562a 100644
--- a/consensus/impl/dpos/blockfactory.go
+++ b/consensus/impl/dpos/blockfactory.go
@@ -155,7 +155,7 @@ func (bf *BlockFactory) generateBlock(bpi *bpInfo) (*types.Block, error) {
 		return nil, err
 	}
 
-	logger.Info().Msgf("block %v produced by BP %v", block.ID(), bf.sID)
+	logger.Info().Msgf("block %v(no=%v) produced by BP %v", block.ID(), block.GetHeader().GetBlockNo(), bf.sID)
 
 	return block, nil
 }
diff --git a/types/blockchain.go b/types/blockchain.go
index 3d1ea33..f8fb8ca 100644
--- a/types/blockchain.go
+++ b/types/blockchain.go
@@ -78,6 +78,8 @@ func (block *Block) Sign(privKey crypto.PrivKey) error {
 	}
 	block.Header.Sign = sig
 
+	//block hash must be recomputed
+	block.Hash = block.CalculateBlockHash()
 	return nil
 }
 
